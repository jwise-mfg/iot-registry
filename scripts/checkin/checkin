#!/bin/bash
url='https://iot.jonathanwise.net/checkin/'
queryString='?version=1.4&'

finduser() {
   lastUsers=$(last -1 -n 1)
   set -- $lastUsers
   echo $1
}

## Prompt user function
function yes_or_no {
    while true; do
        read -p "$* [y/n]: " yn
        case $yn in
            [Yy]*) return 0  ;;  
            [Nn]*) return  1 ;;
        esac
    done
}

## Generate IOT ID
generateid() {
   if [ -f $currHome/.iotid ]; then
      uuid=$(cat $currHome/.iotid)
   fi
   if [ -f /opt/iot-registry/.iotid ]; then
      uuid=$(cat /opt/iot-registry/.iotid)
   fi
   if [ ! "$uuid" ]; then
      nics=(/sys/class/net/*)    #find the network cards
      nic=${nics[0]}             #find the first network card
      mac=$(cat $nic/address)    #find the mac address of the first network card
      uuid=$(echo "${mac//:}")
      uuid=$uuid$(echo $((10 + $RANDOM % 99)))
      if [ -f /opt/iot-registry/checkin ]; then
         echo $uuid > /opt/iot-registry/.iotid
      else
         echo $uuid > $currHome/.iotid
      fi
   fi
   echo $uuid
}
if [ "$1" == "--generate-id" ]; then
   currUser=$(finduser)
   currHome="/home/$currUser/"
   uuid="$(generateid)"
   echo IOT ID: $uuid;
   # Suggest/set hostnames
   if [[ $(hostname) != *${uuid:(-6)} ]]; then
      newhost="$(hostname)"-"${uuid:(-6)}"
      if [ "$EUID" -eq 0 ]; then
         if [ $(which systemctl) ]; then
            if [ "$2" == "--yes" ]; then
               echo Setting hostname: $newhost
               hostname $newhost && hostnamectl set-hostname $newhost
            else
               yes_or_no "Set suggested hostname? $newhost" && hostname $newhost && hostnamectl set-hostname $newhost
            fi
         else
            echo Suggested hostname: $newhost
         fi   
      else
         echo Suggested hostname: $newhost
      fi
   fi
   exit 0
fi

## Install as Service
installservice() {
   if [ "$EUID" -ne 0 ]
      then echo "Please run as root"
      exit 1
   fi
   DEST_PATH=/opt/iot-registry/
   echo Installing as Service in: $DEST_PATH
   currUser=$(finduser)
   currHome="/home/$currUser/"
   if [ "$currUser" == "root" ]; then
      echo "Warning: root user in active use, don't ship in this state!"
   fi
   mkdir -p /opt/iot-registry
   SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
   UNIT_PATH=/etc/systemd/system/iot-registry
   if [ -f "$UNIT_PATH"".service" ]; then
      echo Service already installed!
      echo Remove with --remove-service
      exit 1
   fi
   \cp -r $SCRIPT_DIR/$0 $DEST_PATH"checkin"
   chmod +x $DEST_PATH"checkin"
   if [ -f $currHome".iotid" ]; then
      mv $currHome".iotid" $DEST_PATH".iotid"
   else
      if [ ! -f $DEST_PATH".iotid" ]; then
         uuid="$(generateid)"
         echo IOT ID: $uuid;
      fi
   fi
   if [ $(which systemctl) ]; then
      # Create the Service
      echo "[Unit]" > "$UNIT_PATH"".service"
      echo "Description=IOT Registry Service" >> "$UNIT_PATH"".service"
      echo "Wants = network-online.target" >> "$UNIT_PATH"".service"
      echo "After = network.target network-online.target" >> "$UNIT_PATH"".service"
      echo "" >> "$UNIT_PATH"".service"
      echo "[Service]" >> "$UNIT_PATH"".service"
      echo "Type=oneshot" >> "$UNIT_PATH"".service"
      echo "ExecStart=$DEST_PATH""checkin" >> "$UNIT_PATH"".service"
      echo "" >> "$UNIT_PATH"".service"
      echo "[Install]" >> "$UNIT_PATH"".service"
      echo "WantedBy=multi-user.target" >> "$UNIT_PATH"".service"
      # Create the Timer
      echo "[Unit]" > "$UNIT_PATH"".timer"
      echo "Description=Periodic IOT Registry Checkin" >> "$UNIT_PATH"".timer"
      echo "" >> "$UNIT_PATH"".timer"
      echo "[Timer]" >> "$UNIT_PATH"".timer"
      echo "OnUnitActiveSec=30m" >> "$UNIT_PATH"".timer"
      echo "Persistent=true" >> "$UNIT_PATH"".timer"
      echo "RandomizedDelaySec=20s" >> "$UNIT_PATH"".timer"
      echo "" >> "$UNIT_PATH"".timer"
      echo "[Install]" >> "$UNIT_PATH"".timer"
      echo "WantedBy=timers.target" >> "$UNIT_PATH"".timer"
      # Install
      systemctl daemon-reload
      systemctl enable iot-registry.service
      systemctl start iot-registry.service
      systemctl enable iot-registry.timer
      systemctl start iot-registry.timer
  else
    #TODO: Come up with a better way to control services on systemd-less environments
    echo Now add to cron lines like:
    echo "@reboot sleep 60 && $DESTPATH""checkin"
    echo "*/30 * * * * $DESTPATH""checkin"
  fi
  rm $SCRIPT_DIR/$0
  exit 0
}
if [ "$1" == "--install-service" ]; then
   installservice
   exit
fi

## Remove Service
removeservice() {
   if [ "$EUID" -ne 0 ]
      then echo "Please run as root"
      exit 1
   fi
   echo Removing Service...
   currUser=$(finduser)
   currHome="/home/$currUser/"
   SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
   DEST_PATH=/opt/iot-registry/
   UNIT_PATH=/etc/systemd/system/iot-registry
   if [ -f "$DEST_PATH""checkin" ]; then
      mv $DEST_PATH"checkin" $currHome"checkin"
      chown $currUser:$currUser $currHome"checkin"
      mv $DEST_PATH".iotid" $currHome".iotid"
      chown $currUser:$currUser $currHome".iotid"
      rm -rf $DEST_PATH
   fi
   if [ $(which systemctl) ]; then
      if [ -f "$UNIT_PATH"".service" ]; then
         systemctl stop iot-registry.service
         systemctl stop iot-registry.timer
         systemctl disable iot-registry.service
         systemctl disable iot-registry.timer
         rm "$UNIT_PATH"".service"
         rm "$UNIT_PATH"".timer"
         systemctl daemon-reload
      else
         echo Service not found to remove!
         echo Install with --install-service
         exit 1
      fi
  else
    #TODO: Come up with a better way to control services on systemd-less environments
    echo Now remove from cron lines like:
    echo "@reboot sleep 60 && $DESTPATH""checkin"
    echo "*/30 * * * * $DESTPATH""checkin"
  fi
  exit 0
}
if [ "$1" == "--remove-service" ]; then
   removeservice
   exit
fi


## Normal Operation
if [ "$1" != "" ]; then
   echo "Invalid command-line arguments. Use:"
   echo "--install-service    Installs this script as a service (run as sudo)"
   echo "--remove-service     Remove the service for this script (run as sudo)"
   echo "--generate-id        Generate a unique ID, or show one if it already exists"
   echo "--generate-id --yes  Generate/show a unique ID, set hostname based on it (run as sudo)"
   exit 1
fi
# Get or Create Unique ID
currUser=$(finduser)
currHome="/home/$currUser/"
uuid=$(generateid)
queryString=${queryString}iotid=$uuid
queryString=${queryString}\&

# Find Hostname
if [ $(which hostname) ]; then
    queryString=${queryString}hostname=$(hostname)
fi
queryString=${queryString}\&

# Find IPs
if [ $(which ip) ]; then
   ips=$(ip -4 -o addr show scope global | awk '{gsub(/\/.*/,"",$4); print $4}')
   queryString=${queryString}ips=
   while IFS= read -r line; do
      queryString=${queryString}${line}\,
   done <<< "$ips"
   queryString=${queryString%,*}
fi
queryString=${queryString}\&

# Find last logged in user
if [ $(which hostname) ]; then
   queryString=${queryString}username=${currUser}
fi
queryString=${queryString}\&

# Find Architecture
if [ $(which arch) ]; then
    queryString=${queryString}arch=$(arch)
fi
url=${url}${queryString}

# Find Open ports
if [ $(which netstat) ]; then
   ports=$(netstat -lntu)
fi

# Send the check-in
curl -k --header 'Content-Type: text/plain' --data "$ports" "$url"
exit
